definitions:
  model.AdminLoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  model.ContactUsRequest:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      message:
        type: string
    required:
    - email
    - firstname
    - lastname
    - message
    type: object
  model.CreateUserRequest:
    properties:
      company_name:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
    required:
    - email
    - id
    - name
    - phone_number
    type: object
  model.GetUserByEmailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  model.MembershipStatusChangeRequest:
    properties:
      membership_status:
        type: string
    required:
    - membership_status
    type: object
  model.OrderRequest:
    properties:
      delivery_speed:
        type: string
      details:
        additionalProperties: {}
        type: object
      finish_type:
        type: string
      product_description:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
      shoot_type:
        type: string
      shots:
        items:
          type: string
        type: array
      status:
        type: string
      user_id:
        type: string
    required:
    - product_description
    - product_name
    - shoot_type
    - user_id
    type: object
  model.OrderResponse:
    properties:
      created_at:
        type: string
      delivery_speed:
        type: string
      details:
        additionalProperties: {}
        type: object
      finish_type:
        type: string
      id:
        type: string
      product_description:
        type: string
      product_name:
        type: string
      quantity:
        type: integer
      shoot_type:
        type: string
      shots:
        items:
          type: string
        type: array
      status:
        type: string
      updated_at:
        type: string
      user_email:
        type: string
      user_id:
        type: string
      user_membership_status:
        type: string
    type: object
  model.OrderStatusChangeRequest:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  model.PostResponse:
    properties:
      content:
        type: string
      cover_image:
        type: string
      created_at:
        type: string
      id:
        type: string
      slug:
        type: string
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.ResponseHTTP:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  model.UploadImageResponse:
    properties:
      file_name:
        type: string
      image_url:
        type: string
    type: object
  model.UserResponse:
    properties:
      company_name:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone_number:
        type: string
      preferred_mode_of_communication:
        type: string
      updated_at:
        type: string
      want_to_receive_text:
        type: boolean
    type: object
info:
  contact: {}
  description: This is an backend API for Belva Philips website
  title: Belva Philips Backend API
  version: "1.0"
paths:
  /api/v1/admin/get_users:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of users from the database
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of users per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/model.ResponseHTTP'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.UserResponse'
                    type: array
                type: object
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - admin
  /api/v1/admin/login:
    post:
      consumes:
      - application/json
      description: Create a new authorization token with the provided information
      parameters:
      - description: Login information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AdminLoginRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      summary: Logs admin user into the system
      tags:
      - admin
  /api/v1/contact:
    post:
      consumes:
      - application/json
      description: Submit contact form to notify admin
      parameters:
      - description: Contact information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.ContactUsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      summary: Submit contact form
      tags:
      - contact
  /api/v1/orders:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of orders from the database
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of orders per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/model.ResponseHTTP'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.OrderResponse'
                    type: array
                type: object
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get all orders (strictly for admin)
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Create a new order with the provided information
      parameters:
      - description: Order information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.OrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - orders
  /api/v1/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get order by ID
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get order by ID
      tags:
      - orders
  /api/v1/orders/{order_id}/status:
    put:
      consumes:
      - application/json
      description: Update the status of an order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/model.OrderStatusChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Update the status of an order (strictly for admin)
      tags:
      - orders
  /api/v1/orders/user/{userId}:
    get:
      consumes:
      - application/json
      description: Get order by User ID
      parameters:
      - description: User ID of the user
        in: query
        name: userId
        type: string
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of orders per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.OrderResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get order by User ID
      tags:
      - orders
  /api/v1/posts:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of posts from the database
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of posts per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/model.ResponseHTTP'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.PostResponse'
                    type: array
                type: object
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      summary: Get all published posts
      tags:
      - posts
    post:
      consumes:
      - multipart/form-data
      description: Create a new blog post with the provided information
      parameters:
      - description: Title of the post
        in: formData
        name: title
        required: true
        type: string
      - description: Slug of the post
        in: formData
        name: slug
        required: true
        type: string
      - description: Content of the post
        in: formData
        name: content
        required: true
        type: string
      - description: Status of the post (draft/published)
        in: formData
        name: status
        required: true
        type: string
      - description: Cover image for the post
        in: formData
        name: cover_image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.PostResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Create a new blog post (strictly for admin)
      tags:
      - posts
  /api/v1/posts/{id}:
    get:
      consumes:
      - application/json
      description: Get post by ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.PostResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      summary: Get post by ID
      tags:
      - posts
  /api/v1/posts/drafts:
    get:
      consumes:
      - application/json
      description: Fetch a paginated list of posts from the database
      parameters:
      - description: Page number (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of posts per page (default is 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/model.ResponseHTTP'
              - properties:
                  data:
                    items:
                      $ref: '#/definitions/model.PostResponse'
                    type: array
                type: object
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      summary: Get all draft posts (strictly for admin)
      tags:
      - posts
  /api/v1/posts/upload-image:
    post:
      consumes:
      - multipart/form-data
      description: Uploads an image for the post body
      parameters:
      - description: Title of the post
        in: formData
        name: title
        required: true
        type: string
      - description: Image to upload
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.UploadImageResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Uploads an image for the post body (strictly for admin)
      tags:
      - posts
  /api/v1/users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information
      parameters:
      - description: User information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /api/v1/users/{id}:
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get user by ID
      tags:
      - users
  /api/v1/users/{id}/membership:
    put:
      consumes:
      - application/json
      description: Update the membership status of a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Status update
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.OrderStatusChangeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.MembershipStatusChangeRequest'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Update the membership status of a user
      tags:
      - users
  /api/v1/users/get_user:
    get:
      consumes:
      - application/json
      description: Get user by Email
      parameters:
      - description: User Email
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.GetUserByEmailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/model.ResponseHTTP'
            - properties:
                data:
                  $ref: '#/definitions/model.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.ResponseHTTP'
      security:
      - BearerAuth: []
      summary: Get user by Email
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
